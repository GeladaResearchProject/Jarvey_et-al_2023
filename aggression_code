#####################################
## Aggression Models ################
## last updated: Aug 24, 2022 ######
## written by: Julie Jarvey ########
## contributions ISC 10.2022 ##
## contributions KLC 5.2023 ##
####################################

# Setup ------------------------------------------------------------------------

library(tidyr)
library(dplyr)
library(lme4)
library(visreg)
library(ggplot2)
library(sjmisc)
library(sjPlot)
library(bbmle)
library(lattice)
library(lubridate)
library(ggeffects)
library(ggpubr)

# load data
load("~/Desktop/Data_Analysis - Copy/data/scans.elo.standardized.Rdata")
scans.elo$Date = mdy(scans.elo$Date)

# bring in dobs
dobs = read.csv("~/Desktop/aggression_geladas/dobs.csv", stringsAsFactors = F)
dobs = dobs %>% dplyr::select(Code, Date.of.Birth)
dobs$Date.of.Birth = mdy(dobs$Date.of.Birth)
dobs = dobs %>% rename("ID" = "Code")
dobs = dobs %>% rename("dob" = "Date.of.Birth")

# merge dobs and scans.elo
scans.elo.2 = merge(scans.elo, dobs)

# calculate ages
scans.elo.2$est.age = as.numeric(difftime(as.Date(scans.elo.2$Date), 
                                          as.Date(scans.elo.2$dob),  unit="weeks"))/52.25
# Z unit is missing, fill in
scans.elo.2$Unit = ifelse(scans.elo.2$ID == "ZAM" | scans.elo.2$ID == "ZEE" | scans.elo.2$ID == "ZIM" | 
                            scans.elo.2$ID == "ZIO", "Z", as.character(scans.elo.2$Unit))

# unit size
scans.elo.2 %>%
  group_by(Unit) %>%
  summarise(count = n_distinct(ID))

scans.elo.2 = scans.elo.2 %>%
  group_by(Unit) %>%
  mutate(unique_types = n_distinct(ID))

# Create behavior categories for Nonsocial (NS), Social (S), Feeding Aboveground (FA), and Feeding Belowground (FB)
scans.elo.2$Context3 = ifelse(scans.elo.2$Context == "Move", "NS", scans.elo.2$Context)
scans.elo.2$Context3 = ifelse(scans.elo.2$Context == "Rest", "NS", scans.elo.2$Context3)
scans.elo.2$Context3 = ifelse(scans.elo.2$Context == "Social", "S", scans.elo.2$Context3)
scans.elo.2$Context3 = ifelse(scans.elo.2$Context == "FA", "FA", scans.elo.2$Context3)                              
scans.elo.2$Context3 = ifelse(scans.elo.2$Context == "FB", "FB", scans.elo.2$Context3)   

# Create behavior categories for Feeding belowground (FB), feeding aboveground + moving (FeFo), and social + resting (SoRo).
scans.regroup = scans.elo.2
scans.regroup$new_context = ifelse(scans.regroup$Context == "FA" | scans.regroup$Context == "Move", 
                                   "FeFo", ifelse(scans.regroup$Context == "Social" | scans.regroup$Context == "Rest",
                                                  "SoRo", "FB"))
#subset to within-unit aggression only
within.ns <- scans.regroup %>%
  filter(agg.rec.type == "W")

# relevel context variable
within.ns$new_context = as.factor(within.ns$new_context)
within.ns$new_context = relevel(within.ns$new_context, ref = "FeFo")

# bring in rainfall  

# read data
rain =read.csv("~/Desktop/aggression_geladas/imp1_rain.csv", stringsAsFactors = FALSE)
rain$Date = mdy(rain$Date)
rain = rain %>% select(-X)

# merge within.ns with rain
within.rain = merge(within.ns, rain)

# -----------------model 
mW.rain <- glmer(agg.rec.binary ~ Elo.standardized*new_context + scale(Rain30)  +
              (1|ID/Unit), family=binomial, data=within.rain,
            control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))

# summarize
summary(mW.rain)

# bootstrap to get confidence intervals
result_list_rain = lapply(1:1000,function(i) {
  within_resample = within.rain[sample(1:nrow(within.rain), replace = T),]
  mW_resample <- glmer(agg.rec.binary ~ Elo.standardized*new_context  + scale(Rain30) +
                         (1|ID), family=binomial, data=within_resample,
                       control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
  df_resample = ggpredict(mW_resample, terms = c("Elo.standardized [all]", "new_context"), ci.lvl = 0.95)
  predictions_resample = with(df_resample,data.frame(x,group,predicted,iteration=i))
  return(predictions_resample)
})

# generate and format list of bootstrapping results
results_df_rain = do.call(rbind,result_list_rain)
results_df_stats_rain = do.call(rbind,lapply(split(results_df_rain,with(results_df_rain,list(x,group))),function(this) {
  ci = quantile(this$predicted,c(0.025,0.975))
  data.frame(x = unique(this$x),group=unique(this$group),pred.lower = ci[1],pred.upper=ci[2])
}))

# predicted values
df_rain = ggpredict(mW.rain, terms = c("Elo.standardized [all]", "new_context"), ci.lvl = 0.95)
within_results_rain = with(df_rain,data.frame(x,group,predicted))

# predicted values
df_rain = ggpredict(mW.rain, terms = c("Elo.standardized [all]", "new_context"), ci.lvl = 0.95)
within_results_rain = with(df_rain,data.frame(x,group,predicted))

# plot predicted values with bootstrapped CIs
ggplot() +
  geom_ribbon(data=results_df_stats_rain,aes(x,ymin=pred.lower*100,ymax=pred.upper*100,fill=group),alpha=0.07) + 
  geom_line(data = df_rain, aes(x, predicted*100, col = group)) + theme_classic() +
  theme_classic(base_size = 20) +
  theme(legend.title=element_blank()) +
  ylab("Probability of receiving aggression (%)") + xlab("Standardized rank") +
  scale_color_manual(values=c('#1170aa', '#a3acb9','#fc7d0b'),name='') +
  scale_fill_manual(values=c('#1170aa','#a3acb9', '#fc7d0b'),name='') +
  ggtitle("") + 
  coord_cartesian(ylim=c(0,35))
  
# plot model estimates in forest plot  
# within unit
wthn.agg.rain <- plot_model(mW.rain, type = 'est', title = "") +
  theme_classic() + scale_y_continuous(trans='log2', limits = c(0.0625,4), breaks = c(0.125, .25, .5, 1, 2, 4), labels = seq(-3, 2, 1)) 
wthn.agg.rain = wthn.agg.rain + geom_hline(yintercept=1.0, linetype='dashed', color='grey70', size=1) + 
  scale_color_manual(values = c("#9933CC", "#9933CC")) +
  scale_x_discrete(labels = c('Elo:Social/Resting', 'Elo:Belowground Feeding', 'Rain (30-day)', 'Social/Resting', 'Feeding Belowground', 'Elo Rating'))  + 
  coord_flip(ylim = c(0.18, 4)) + theme_classic(base_size = 20) + ylab(expression(Log[2]~"Odds Ratio")) 
